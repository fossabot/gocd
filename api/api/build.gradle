/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
  }
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'groovy'
apply plugin: 'jacoco'

dependencies {
  compile project(':server')

  compile(group: 'com.sparkjava', name: 'spark-core', version: project.versions.spark) {
    transitive = false
  }
  compile group: 'cd.go.jrepresenter', name: 'annotation', version: project.versions.jrepresenter

  testCompile localGroovy()
  testCompile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.versions.junit5
  testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.versions.junit5
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: project.versions.junit5
  testCompile group: 'org.mockito', name: 'mockito-core', version: project.versions.mockito2
  testCompile group: 'org.assertj', name: 'assertj-core', version: project.versions.assertJ
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: project.versions.jsonAssert
  testCompile group: 'net.javacrumbs.json-unit', name: 'json-unit-fluent', version: project.versions.jsonUnit
  testCompile group: 'org.springframework', name: 'spring-test', version: project.versions.spring
}

compileTestJava {
  options.compilerArgs += '-parameters'
}

junitPlatform {
  enableStandardTestTask = true
}

junitPlatformTest {
  outputs.upToDateWhen { false }

  doFirst {
    classpath += rootProject.findProject(':test-utils').files("resource-include-in-all-projects")
  }
}

afterEvaluate {
  def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

  jacoco {
    applyTo(junitPlatformTestTask)
  }

  project.task(type: JacocoReport, "jacocoJupiterTestReport") {
    executionData(junitPlatformTestTask)
    sourceSets(sourceSets.main)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)

    reports {
      xml.enabled true
      html.enabled true
    }
  }

  check.dependsOn jacocoJupiterTestReport
  test.dependsOn jacocoJupiterTestReport
}
